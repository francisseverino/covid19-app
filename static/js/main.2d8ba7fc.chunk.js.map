{"version":3,"sources":["config/Api.js","App.js","serviceWorker.js","index.js"],"names":["request","endpoint","fetch","then","response","json","api","getGlobalTotals","getCountries","getStates","Counter","state","global","byCountry","filteredCountries","byStates","filteredStates","showByCountry","showByStates","closeByCountry","setState","closeByStates","formatNumber","value","toLocaleString","navigator","language","minimumFractionDigits","_filterState","query","data","trim","regex","RegExp","filter","search","handleStateChange","event","filtered","target","stateQuery","StatesModal","Modal","show","onHide","scrollable","size","centered","Header","closeButton","className","class","FormControl","type","placeholder","onChange","Title","Body","Table","striped","bordered","hover","variant","map","cases","todayCases","deaths","todayDeaths","active","handleCountryChange","_filterCountry","countryQuery","country","CountryModal","Figure","Image","width","src","countryInfo","flag","recovered","critical","casesPerOneMillion","deathsPerOneMillion","this","Row","float","Col","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d8ba7fc.chunk.js","sourcesContent":["// Documentation for API https://corona.lmao.ninja/docs/\n\nconst request = (endpoint) => \n  fetch(`https://corona.lmao.ninja/v2/${endpoint}`)\n    .then(response => response.json())\nexport default class CarAPI {\n  getGlobalTotals = () => request('all')\n\n  getCountries = () => request('countries')\n\n  getStates = () => request('states')\n\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport API from './config/Api';\nimport { Row, Col, Button, Modal, Table, Figure, FormControl } from 'react-bootstrap';\n\nconst api = new API();\n\nclass Counter extends Component {\n  state = {\n    global: {},\n    byCountry: [],\n    filteredCountries: [],\n    byStates: [],\n    filteredStates: [],\n    showByCountry: false,\n    showByStates: false,\n  };\n\n  componentDidMount() {\n    //Populate all the needed data to the state\n    api.getGlobalTotals().then(response => {\n      this.setState({\n        global: response,\n      });\n    });\n    api.getCountries().then(response => {\n      this.setState({\n        byCountry: response,\n        filteredCountries: response,\n      });\n    });\n    api.getStates().then(response => {\n      this.setState({\n        byStates: response,\n        filteredStates: response,\n      });\n    });\n  }\n\n  //Modals Togglers\n  closeByCountry = () => {\n    this.setState({\n      showByCountry: false,\n    });\n  };\n\n  showByCountry = () => {\n    this.setState({\n      showByCountry: true,\n    });\n  };\n\n  closeByStates = () => {\n    this.setState({\n      showByStates: false,\n    });\n  };\n\n  showByStates = () => {\n    this.setState({\n      showByStates: true,\n    });\n  };\n\n  formatNumber = value => {\n    //i.e. 1324 -> 1,324\n    return value && value.toLocaleString(navigator.language, { minimumFractionDigits: 0 });\n  };\n\n  render() {\n    const { global } = this.state;\n    return (\n      <div className='bgimg'>\n        <div className='bg-layout'>\n          <div className='middle'>\n            <div className='content'>\n              <h2 className='mb-5 font-weight-light'>COVID-19 CORONAVIRUS PANDEMIC</h2>\n              <br />\n              <Row className='show-grid content-space' float='center'>\n                <Col>\n                  <h1 className='global-cases-total text-info font-weight-lighter'>\n                    {this.formatNumber(global.cases)}\n                  </h1>\n                  <h2 className='font-weight-light'>Coronavirus Cases</h2>\n                </Col>\n\n                <Col>\n                  <h1 className='global-cases-total text-danger font-weight-lighter'>\n                    {this.formatNumber(global.deaths)}\n                  </h1>\n                  <h2 className='font-weight-light'>Deaths</h2>\n                </Col>\n\n                <Col>\n                  <h1 className='global-cases-total text-success font-weight-lighter'>\n                    {this.formatNumber(global.recovered)}\n                  </h1>\n                  <h2 className='font-weight-light'>Recovered</h2>\n                </Col>\n\n                <Col>\n                  <h1 className='global-cases-total text-warning font-weight-lighter'>\n                    {this.formatNumber(global.active)}\n                  </h1>\n                  <h2 className='font-weight-light'>Active Cases</h2>\n                </Col>\n              </Row>\n              <Button className=' m-5' variant='outline-light' size='lg' onClick={this.showByCountry}>\n                View by Country\n              </Button>\n              <Button className='m-5' variant='outline-light' size='lg' onClick={this.showByStates}>\n                View by USA States\n              </Button>\n            </div>\n          </div>\n          <div className='bottomleft'></div>\n        </div>\n        {this.StatesModal()}\n        {this.CountryModal()}\n      </div>\n    );\n  }\n\n  _filterState = (query, data) => {\n    if (!query || (query && !query.trim())) {\n      return data;\n    }\n    const regex = new RegExp(`${query.trim()}`, 'i');\n    return data.filter(value => value.state.search(regex) >= 0);\n  };\n\n  handleStateChange = event => {\n    const filtered = this._filterState(event.target.value, this.state.byStates);\n    this.setState({\n      filteredStates: filtered,\n      stateQuery: event.target.value,\n    });\n  };\n\n  StatesModal = () => {\n    const { showByStates, stateQuery, filteredStates } = this.state;\n    return (\n      <>\n        <Modal show={showByStates} onHide={this.closeByStates} scrollable={true} size='lg' centered>\n          <Modal.Header closeButton className='bg-dark border-0'>\n            <div class='col-sm-3'>\n              <FormControl\n                type='text'\n                placeholder='Search By State'\n                className='mr-sm-2'\n                value={stateQuery}\n                onChange={this.handleStateChange}\n              />\n            </div>\n            <Modal.Title className='text-light'>Cases By State in the USA</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className='bg-dark'>\n            <Table striped bordered hover variant='dark'>\n              <thead>\n                <tr>\n                  <th>State</th>\n                  <th>Total Cases</th>\n                  <th>New Cases</th>\n                  <th>Total Deaths</th>\n                  <th>New Deaths</th>\n                  <th>Active Cases</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredStates.map(state => (\n                  <tr>\n                    <td>{state.state}</td>\n                    <td>{this.formatNumber(state.cases)}</td>\n                    <td>{this.formatNumber(state.todayCases)}</td>\n                    <td>{this.formatNumber(state.deaths)}</td>\n                    <td>{this.formatNumber(state.todayDeaths)}</td>\n                    <td>{this.formatNumber(state.active)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  };\n\n  handleCountryChange = event => {\n    const filtered = this._filterCountry(event.target.value, this.state.byCountry);\n    this.setState({\n      filteredCountries: filtered,\n      countryQuery: event.target.value,\n    });\n  };\n\n  _filterCountry = (query, data) => {\n    if (!query || (query && !query.trim())) {\n      return data;\n    }\n    const regex = new RegExp(`${query.trim()}`, 'i');\n    return data.filter(value => value.country.search(regex) >= 0);\n  };\n\n  CountryModal = () => {\n    const { showByCountry, countryQuery, filteredCountries } = this.state;\n\n    return (\n      <>\n        <Modal show={showByCountry} onHide={this.closeByCountry} scrollable={true} size='xl' centered>\n          <Modal.Header closeButton className='bg-dark border-0'>\n            <div class='col-sm-3'>\n              <FormControl\n                type='text'\n                placeholder='Search By Country'\n                className='mr-sm-2'\n                value={countryQuery}\n                onChange={this.handleCountryChange}\n              />\n            </div>\n            <Modal.Title className='text-light'>Cases By Country</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className='bg-dark'>\n            <Table striped bordered hover variant='dark'>\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Country</th>\n                  <th>Total Cases</th>\n                  <th>New Cases</th>\n                  <th>Total Deaths</th>\n                  <th>New Deaths</th>\n                  <th>Total Recovered</th>\n                  <th>Active Cases</th>\n                  <th>Serious, Critical</th>\n                  <th>Cases Per One Million</th>\n                  <th>Deaths Per One Million</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredCountries.map(country => (\n                  <tr>\n                    <td>{<Figure.Image width={70} src={country.countryInfo.flag} />}</td>\n                    <td>{country.country}</td>\n                    <td>{this.formatNumber(country.cases)}</td>\n                    <td>{this.formatNumber(country.todayCases)}</td>\n                    <td>{this.formatNumber(country.deaths)}</td>\n                    <td>{this.formatNumber(country.todayDeaths)}</td>\n                    <td>{this.formatNumber(country.recovered)}</td>\n                    <td>{this.formatNumber(country.active)}</td>\n                    <td>{this.formatNumber(country.critical)}</td>\n                    <td>{this.formatNumber(country.casesPerOneMillion)}</td>\n                    <td>{this.formatNumber(country.deathsPerOneMillion)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  };\n}\n\nexport default Counter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}