{"version":3,"sources":["App.js","config/Api.js","serviceWorker.js","index.js"],"names":["api","getGlobalTotals","fetch","then","response","json","responseJson","getCountries","getStates","Counter","state","global","byCountry","byStates","showByCountry","showByStates","formatNumber","value","toLocaleString","navigator","language","minimumFractionDigits","closeByCountry","setState","closeByStates","StatesModal","Modal","show","onHide","scrollable","size","centered","Header","closeButton","className","Title","Body","Table","striped","bordered","hover","variant","map","cases","todayCases","deaths","todayDeaths","active","handleChange","event","search","target","CountryModal","country","Figure","Image","width","src","countryInfo","flag","recovered","critical","casesPerOneMillion","deathsPerOneMillion","this","Row","float","Col","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28c59850.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./config/Api\";\nimport { Row, Col, Button, Modal, Table, Figure, FormControl } from \"react-bootstrap\";\n\nconst api = new API();\n\nclass Counter extends Component {\n  state = {\n    global: {},\n    byCountry: [],\n    byStates: [],\n    showByCountry: false,\n    showByStates: false\n  };\n\n  componentDidMount() {\n    //Populate all the needed data to the state\n    api.getGlobalTotals().then(response => {\n      this.setState({\n        global: response\n      });\n    });\n    api.getCountries().then(response => {\n      this.setState({\n        byCountry: response\n      });\n    });\n    api.getStates().then(response => {\n      this.setState({\n        byStates: response\n      });\n    });\n  }\n\n  formatNumber = value => {\n    //i.e. 1324 -> 1,324\n    return value && value.toLocaleString(navigator.language, { minimumFractionDigits: 0 });\n  };\n\n  render() {\n    const { global } = this.state;\n    return (\n      <div className=\"bgimg\">\n        <div className=\"bg-layout\">\n          <div className=\"middle\">\n            <div className=\"content\">\n              <h2 className=\"mb-5 font-weight-light\">COVID-19 CORONAVIRUS PANDEMIC</h2>\n              <br />\n              <Row className=\"show-grid content-space\" float=\"center\">\n                <Col>\n                  <h1 className=\"global-cases-total text-info font-weight-lighter\">\n                    {this.formatNumber(global.cases)}\n                  </h1>\n                  <h2 className=\"font-weight-light\">Coronavirus Cases</h2>\n                </Col>\n\n                <Col>\n                  <h1 className=\"global-cases-total text-danger font-weight-lighter\">\n                    {this.formatNumber(global.deaths)}\n                  </h1>\n                  <h2 className=\"font-weight-light\">Deaths</h2>\n                </Col>\n\n                <Col>\n                  <h1 className=\"global-cases-total text-success font-weight-lighter\">\n                    {this.formatNumber(global.recovered)}\n                  </h1>\n                  <h2 className=\"font-weight-light\">Recovered</h2>\n                </Col>\n\n                <Col>\n                  <h1 className=\"global-cases-total text-warning font-weight-lighter\">\n                    {this.formatNumber(global.active)}\n                  </h1>\n                  <h2 className=\"font-weight-light\">Active Cases</h2>\n                </Col>\n              </Row>\n              <Button className=\" m-5\" variant=\"outline-light\" size=\"lg\" onClick={this.showByCountry}>\n                View by Country\n              </Button>\n              <Button className=\"m-5\" variant=\"outline-light\" size=\"lg\" onClick={this.showByStates}>\n                View by USA States\n              </Button>\n            </div>\n          </div>\n          <div className=\"bottomleft\"></div>\n        </div>\n        {this.StatesModal()}\n        {this.CountryModal()}\n      </div>\n    );\n  }\n\n  closeByCountry = () => {\n    this.setState({\n      showByCountry: false\n    });\n  };\n\n  showByCountry = () => {\n    this.setState({\n      showByCountry: true\n    });\n  };\n\n  closeByStates = () => {\n    this.setState({\n      showByStates: false\n    });\n  };\n\n  showByStates = () => {\n    this.setState({\n      showByStates: true\n    });\n  };\n\n  StatesModal = () => {\n    const { byStates, showByStates } = this.state;\n    return (\n      <>\n        <Modal show={showByStates} onHide={this.closeByStates} scrollable={true} size=\"lg\" centered>\n          <Modal.Header closeButton className=\"bg-dark border-0\">\n            <Modal.Title className=\"text-light\">Cases By State in the USA</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"bg-dark\">\n            <Table striped bordered hover variant=\"dark\">\n              <thead>\n                <tr>\n                  <th>State</th>\n                  <th>Total Cases</th>\n                  <th>New Cases</th>\n                  <th>Total Deaths</th>\n                  <th>New Deaths</th>\n                  <th>Active Cases</th>\n                </tr>\n              </thead>\n              <tbody>\n                {byStates.map(state => (\n                  <tr>\n                    <td>{state.state}</td>\n                    <td>{this.formatNumber(state.cases)}</td>\n                    <td>{this.formatNumber(state.todayCases)}</td>\n                    <td>{this.formatNumber(state.deaths)}</td>\n                    <td>{this.formatNumber(state.todayDeaths)}</td>\n                    <td>{this.formatNumber(state.active)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  };\n\n  handleChange = event => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  CountryModal = () => {\n    const { byCountry, showByCountry, search } = this.state;\n\n    return (\n      <>\n        <Modal show={showByCountry} onHide={this.closeByCountry} scrollable={true} size=\"xl\" centered>\n          <Modal.Header closeButton className=\"bg-dark border-0\">\n            {/* <FormControl\n                type=\"text\"\n                placeholder=\"Search By Country\"\n                className=\"mr-sm-2\"\n                value={search}\n                onChange={this.handleChange}\n              /> */}\n            <Modal.Title className=\"text-light\">Cases By Country</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"bg-dark\">\n            <Table striped bordered hover variant=\"dark\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Country</th>\n                  <th>Total Cases</th>\n                  <th>New Cases</th>\n                  <th>Total Deaths</th>\n                  <th>New Deaths</th>\n                  <th>Total Recovered</th>\n                  <th>Active Cases</th>\n                  <th>Serious, Critical</th>\n                  <th>Cases Per One Million</th>\n                  <th>Deaths Per One Million</th>\n                </tr>\n              </thead>\n              <tbody>\n                {byCountry.map(country => (\n                  <tr>\n                    <td>{<Figure.Image width={70} src={country.countryInfo.flag} />}</td>\n                    <td>{country.country}</td>\n                    <td>{this.formatNumber(country.cases)}</td>\n                    <td>{this.formatNumber(country.todayCases)}</td>\n                    <td>{this.formatNumber(country.deaths)}</td>\n                    <td>{this.formatNumber(country.todayDeaths)}</td>\n                    <td>{this.formatNumber(country.recovered)}</td>\n                    <td>{this.formatNumber(country.active)}</td>\n                    <td>{this.formatNumber(country.critical)}</td>\n                    <td>{this.formatNumber(country.casesPerOneMillion)}</td>\n                    <td>{this.formatNumber(country.deathsPerOneMillion)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  };\n}\n\nexport default Counter;\n","// Documentation for API https://docs.corona.lmao-xd.wtf/\nexport default class CarAPI {\n  getGlobalTotals = () => {\n    return fetch(\"https://corona.lmao.ninja/all\")\n      .then(response => {\n        return response.json();\n      })\n      .then(responseJson => {\n        return responseJson;\n      });\n  };\n  getCountries = () => {\n    return fetch(\"https://corona.lmao.ninja/countries\")\n      .then(response => {\n        return response.json();\n      })\n      .then(responseJson => {\n        return responseJson;\n      });\n  };\n  getStates = () => {\n    return fetch(\"https://corona.lmao.ninja/states\")\n      .then(response => {\n        return response.json();\n      })\n      .then(responseJson => {\n        return responseJson;\n      });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}